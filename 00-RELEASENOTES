Valkey Search 1.0 release notes
=================================

================================================================================
Valkey Search 1.0.0 GA - Released Wed 28 May 2025
================================================================================

This is the first official release of Valkey Search 1.0. This release is fully compatible with Valkey 8.1.1 and later releases.

Behavior changes
================
* Adding support for blocking clients during keyspace notification (#95)
* Make index backfill batch/block size configurable (#97)
* FT.SEARCH - Update neighbor sorting to always be asc (#104)
* Add OOM checking to index backfill (#135)

Bug fixes
=========
* Avoid unsafe code in INFO during crash dump (#98)
* Support counting cores on aarch64 (#107)
* Create index with the correct DB number (#120) (#123)
* Fix dumping corrupted rdb file (#131)
* Fix empty vector query clause ft.search cmd parsing (#138)

Performance/efficiency improvements
===================================
* Allow dynamic adjustment of thread count at runtime (#126) (#129)

Build and packaging changes
===========================
* Allow building with external libs (#85)
* Don't suppress error when running python integration tests (#89)
* Add ASAN build option (#100)

================================================================================
Valkey Search 1.0.0 RC1 - Released Fri 28 Mar 2025
================================================================================
This is the first release candidate of valkey-search 1.0 that is a high-performance Vector Similarity Search engine optimized for AI-driven workloads. It delivers single-digit millisecond latency and high QPS, capable of handling billions of vectors with over 99% recall.

Valkey-Search allows users to create indexes and perform similarity searches, incorporating complex filters. It supports Approximate Nearest Neighbor (ANN) search with HNSW and exact matching using K-Nearest Neighbors (KNN). Users can index data using either Valkey Hash or Valkey-JSON data types.

Major API and Functionality
=========================
* Add the search module data type which can handle RDB load, RDB save, free, and memory usage
* Add the following search module commands: 
    ** FT.CREATE
    ** FT.DROPINDEX
    ** FT.INFO
    ** FT._LIST
    ** FT.SEARCH
* Supported indexes
    ** Vector: HNSW and Flat
    ** Non-vector: Numeric and Tag
* Index data types include Valkey Hash and Valkey JSON.
* Cluster support including cross-shard search via coordinator mode
* Linear scaling of keyspace and compute
* ACL support
* RDB serialization of metadata including the search index
* Hybrid queries combining vector and non vector indexes
* Handle key space events for data mutation
* Expose statistics and reporting memory usage to the core valkey engine

New configurations
===========================
* Add support for the following configurations: reader-threads, writer-threads, use-coordinator, log-level

We appreciate the efforts of all who contributed code to this release!

Yair Gottdenker (yairgott), Jacob Murphy (murphyjacob4), Allen Samuels (allenss-amazon), Eran Ifrah (eifrah-aws),
Chanil Jeon (jeon1226), Qu Chen (QuChen88), DP (dpbnasika), Shivshankar-Reddy, KarthikSubbarao, Hyeonho Kim (proost)
