# Determine if we are building in Release or Debug mode
if(CMAKE_BUILD_TYPE MATCHES Release)
  set(VALKEY_SEARCH_DEBUG_BUILD 0)
  set(VALKEY_SEARCH_RELEASE_BUILD 1)
  message(STATUS "Building in release mode")
else()
  set(VALKEY_SEARCH_DEBUG_BUILD 1)
  set(VALKEY_SEARCH_RELEASE_BUILD 0)
  message(STATUS "Building in debug mode")
endif()

# A wrapper around "add_library" (STATIC) that enables the
# INTERPROCEDURAL_OPTIMIZATION property for release builds ("lto")
function(valkey_search_add_static_library name sources)
  message(STATUS "Adding static library ${name}")
  add_library(${name} STATIC ${sources})
  if(VALKEY_SEARCH_RELEASE_BUILD)
    set_property(TARGET ${name} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
    message(STATUS "Adding static library ${name} - LTO enabled")
  else()
    message(STATUS "Adding static library ${name}")
  endif()
  valkey_search_target_update_compile_flags(${name})
endfunction()

# A wrapper around "add_library" (SHARED) that enables the
# INTERPROCEDURAL_OPTIMIZATION property for release builds ("lto")
function(valkey_search_add_shared_library name sources)
  add_library(${name} SHARED ${sources})
  if(VALKEY_SEARCH_RELEASE_BUILD)
    set_property(TARGET ${name} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
    message(STATUS "Adding shared library ${name} - LTO enabled")
  else()
    message(STATUS "Adding shared library ${name}")
  endif()
  valkey_search_target_update_compile_flags(${name})
endfunction()

# Setup global compile flags to match BAZEL build flags
function(_add_global_build_flag _FLAG)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_FLAG}")
endfunction()

function(valkey_search_target_update_compile_flags TARGET)
  target_compile_options(${TARGET} PRIVATE -falign-functions=5)
  target_compile_options(${TARGET} PRIVATE -fmath-errno)
  target_compile_options(${TARGET} PRIVATE -ffp-contract=off)
  target_compile_options(${TARGET} PRIVATE -fno-rounding-math)
  target_compile_options(${TARGET} PRIVATE -maes)
  target_compile_options(${TARGET} PRIVATE -mcx16)
  target_compile_options(${TARGET} PRIVATE -msse4.2)
  target_compile_options(${TARGET} PRIVATE -mpclmul)
  target_compile_options(${TARGET} PRIVATE -mprfchw)
  target_compile_options(${TARGET} PRIVATE -mavx)
  target_compile_options(${TARGET} PRIVATE -mtune=generic)
  target_compile_options(${TARGET} PRIVATE -gdwarf-5)
  target_compile_options(${TARGET} PRIVATE -gz=zlib)
  target_compile_options(${TARGET} PRIVATE -ffast-math)
  target_compile_options(${TARGET} PRIVATE -funroll-loops)
  target_compile_options(${TARGET} PRIVATE -ftree-vectorize)
  target_compile_options(${TARGET} PRIVATE -fopenmp)
  target_compile_options(${TARGET} PRIVATE -mavx2)
  target_compile_options(${TARGET} PRIVATE -mfma)
  target_compile_options(${TARGET} PRIVATE -ffp-contract=off)
  target_compile_options(${TARGET} PRIVATE -flax-vector-conversions)
  if(VALKEY_SEARCH_DEBUG_BUILD)
    target_compile_options(${TARGET} PRIVATE -O0)
    target_compile_options(${TARGET} PRIVATE -fno-omit-frame-pointer)
    target_compile_definitions(${TARGET} PRIVATE NDEBUG)
  endif()
endfunction()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-requires")

include(protobuf_generate)
include(linux_utils)
